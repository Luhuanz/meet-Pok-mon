import ollama
import json
import re
def Intent_Recognition(query, choice='qwen2.5:7b'):
    prompt = f"""
    阅读以下提示，判断用户问题中的意图（问题在最后的 {{query}}），从下列『意图类别』中进行匹配，若没有匹配的，则返回"未匹配"：
    1. 查询宝可梦中文名
    2. 查询宝可梦英文名
    3. 查询宝可梦特性
    4. 查询宝可梦隐藏特性
    5. 查询宝可梦身高
    6. 查询宝可梦体重
    7. 查询宝可梦进化等级
    8. 查询宝可梦属性抗性
    9. 查询宝可梦进化形态
    10. 查询宝可梦属性
    11. 查询人物性别
    12. 查询人物英文名
    13. 查询人物日本名
    14. 查询人物的挑战者
    15. 查询人物的伙伴
    16. 查询人物的敌对者
    17. 查询人物的亲戚
    18. 查询某个属性的宝可梦有哪些
    19. 查询城镇位于的地区
    20. 查询地区的城镇有哪些
    21. 查询人物来自哪个地区
    22. 查询地区有哪些人物
    23. 查询人物拥有哪些宝可梦
    24. 查询拥有某个宝可梦的人物有哪些
    25. 查询城镇有哪些宝可梦
    26. 查询哪些城镇有某个宝可梦
    27. 查询城镇有哪些人物
    28. 查询人物来自哪个城镇
    29. 查询某个地区有多少城镇
    30. 查询某个城镇有多少宝可梦
    31. 查询人物拥有多少宝可梦
    32. 查询宝可梦有多少种属性
    
    
    
    
    
    **识别意图的方法：**
    - 请仔细阅读用户的问题，分析其真正的需求。
    - 对照上面『意图类别』的含义，看看用户是否在询问“属性”、“进化关系”、“所在地”等。
    - 如果用户的问题里显式或隐式地包含某个意图，就把对应的意图类别放入输出列表中。
    - 最终输出列表中，只能包含以上列出的意图类别，**不可以**创造新类别，若没有匹配的，则返回"未匹配"。
    - 如果可能存在多个意图（比如既问“拥有哪些宝可梦”，又问“它们有什么特性”），可以全部列入；但不超过 5 个。
    - 确保最终的输出列表包含了所有与用户问题相关的类别描述。

    以下是一些含有隐晦性意图的例子，每个例子都采用了输入和输出格式，并包含了对你进行思维链形成的提示：

    **示例1：**
    输入："赤红拥有哪些宝可梦？"
    输出：["查询人物拥有哪些宝可梦"] 

    **示例2：**
    输入："妙蛙种子会进化成什么？"
    输出：["查询宝可梦进化形态"] 

    **示例3：**
    输入："皮卡丘有什么特性？"
    输出：["查询宝可梦特性"] 

    **示例4：**
    输入："小智的朋友有哪些？"
    输出：["查询人物的伙伴"]

    **示例5：**
    输入："真新镇有哪些著名宝可梦？"
    输出：["查询城镇有哪些宝可梦"] 
    
    **示例6：**
    输入："小智有多少宝可梦？"
    输出：["查询人物拥有多少宝可梦"] 
    
    **示例7：**
    输入："皮卡丘喜欢吃什么？"
    输出：["未匹配"] 
    
    **注意：**
    1. 只能输出在上述意图类别范围内的内容，请不要新建其他名称，若没有匹配的，则返回"未匹配"。
    2. 最多输出 5 个类别，如果用户的问题涉及过多意图，请只选最核心的 5 个。
    下面是你要处理的真实问题，请进行意图识别并输出结果！

    用户问题："{query}"

    请在输出时：
    - 返回一个 Python 列表，元素是字符串形式的意图类别，如 ["查询人物的伙伴","查询宝可梦特性"]。
    """

    rec_result = ollama.generate(model=choice, prompt=prompt)['response']
    match = re.search(r"\[.*?\]", rec_result, re.DOTALL)
    if match:
        list_str = match.group(0)  # 提取到方括号内的内容
        try:
            parsed_result = json.loads(list_str)  # 解析 JSON
            if isinstance(parsed_result, list):
                return parsed_result
        except json.JSONDecodeError:
            print(f"JSON解析失败，提取后的内容: {list_str}")
    else:
        print(f"未找到匹配的列表，原始输出: {rec_result}")

    return rec_result
if __name__ == '__main__':
    temp = Intent_Recognition('小刚是哪个镇的')
    print(temp)